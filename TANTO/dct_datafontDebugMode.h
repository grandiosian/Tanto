#ifndef DCT_DATAFONTDEBUGMODE_H
#define DCT_DATAFONTDEBUGMODE_H


typedef struct {
    unsigned short charcode;  // Utiliser unsigned short pour gérer les codes > 127
    int offset;
} CharMapEntry;

const unsigned char FONT_COMPLETE[] = 
{
    // Espace (32)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // ! (33)
    0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00,
    // " (34)
    0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // # (35)
    0x28, 0x28, 0x7C, 0x28, 0x7C, 0x28, 0x28, 0x00,
    // $ (36)
    0x38, 0x54, 0x50, 0x38, 0x14, 0x54, 0x38, 0x00,
    // % (37)
    0x60, 0x64, 0x08, 0x10, 0x20, 0x4C, 0x0C, 0x00,
    // & (38)
    0x20, 0x50, 0x50, 0x20, 0x54, 0x48, 0x34, 0x00,
    // ' (39)
    0x30, 0x30, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00,
    // ( (40)
    0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
    // ) (41)
    0x20, 0x10, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00,
    // * (42)
    0x00, 0x28, 0x10, 0x7C, 0x10, 0x28, 0x00, 0x00,
    // + (43)
    0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00,
    // , (44)
    0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x20, 0x40,
    // - (45)
    0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00,
    // . (46)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
    // / (47)
    0x00, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x00,
    // 0 (48)
    0x38, 0x44, 0x4C, 0x54, 0x64, 0x44, 0x38, 0x00,
    // 1 (49)
    0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x7C, 0x00,
    // 2 (50)
    0x38, 0x44, 0x04, 0x08, 0x10, 0x20, 0x7C, 0x00,
    // 3 (51)
    0x38, 0x44, 0x04, 0x18, 0x04, 0x44, 0x38, 0x00,
    // 4 (52)
    0x08, 0x18, 0x28, 0x48, 0x7C, 0x08, 0x08, 0x00,
    // 5 (53)
    0x7C, 0x40, 0x78, 0x04, 0x04, 0x44, 0x38, 0x00,
    // 6 (54)
    0x38, 0x44, 0x40, 0x78, 0x44, 0x44, 0x38, 0x00,
    // 7 (55)
    0x7C, 0x04, 0x08, 0x10, 0x20, 0x20, 0x20, 0x00,
    // 8 (56)
    0x38, 0x44, 0x44, 0x38, 0x44, 0x44, 0x38, 0x00,
    // 9 (57)
    0x38, 0x44, 0x44, 0x3C, 0x04, 0x44, 0x38, 0x00,
    // : (58)
    0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x00, 0x00,
    // ; (59)
    0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x20, 0x40,
    // < (60)
    0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x00,
    // = (61)
    0x00, 0x00, 0x7C, 0x00, 0x7C, 0x00, 0x00, 0x00,
    // > (62)
    0x40, 0x20, 0x10, 0x08, 0x10, 0x20, 0x40, 0x00,
    // ? (63)
    0x38, 0x44, 0x04, 0x08, 0x10, 0x00, 0x10, 0x00,
    // @ (64)
    0x38, 0x44, 0x4C, 0x54, 0x5C, 0x40, 0x38, 0x00,
    // A (65)
    0x38, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x00,
    // B (66)
    0x78, 0x44, 0x44, 0x78, 0x44, 0x44, 0x78, 0x00,
    // C (67)
    0x38, 0x44, 0x40, 0x40, 0x40, 0x44, 0x38, 0x00,
    // D (68)
    0x78, 0x44, 0x44, 0x44, 0x44, 0x44, 0x78, 0x00,
    // E (69)
    0x7C, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7C, 0x00,
    // F (70)
    0x7C, 0x40, 0x40, 0x78, 0x40, 0x40, 0x40, 0x00,
    // G (71)
    0x38, 0x44, 0x40, 0x5C, 0x44, 0x44, 0x38, 0x00,
    // H (72)
    0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x00,
    // I (73)
    0x38, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00,
    // J (74)
    0x04, 0x04, 0x04, 0x04, 0x44, 0x44, 0x38, 0x00,
    // K (75)
    0x44, 0x48, 0x50, 0x60, 0x50, 0x48, 0x44, 0x00,
    // L (76)
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C, 0x00,
    // M (77)
    0x44, 0x6C, 0x54, 0x54, 0x44, 0x44, 0x44, 0x00,
    // N (78)
    0x44, 0x64, 0x54, 0x4C, 0x44, 0x44, 0x44, 0x00,
    // O (79)
    0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,
    // P (80)
    0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x40, 0x00,
    // Q (81)
    0x38, 0x44, 0x44, 0x44, 0x54, 0x48, 0x34, 0x00,
    // R (82)
    0x78, 0x44, 0x44, 0x78, 0x50, 0x48, 0x44, 0x00,
    // S (83)
    0x38, 0x44, 0x40, 0x38, 0x04, 0x44, 0x38, 0x00,
    // T (84)
    0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00,
    // U (85)
    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,
    // V (86)
    0x44, 0x44, 0x44, 0x44, 0x44, 0x28, 0x10, 0x00,
    // W (87)
    0x44, 0x44, 0x44, 0x54, 0x54, 0x6C, 0x44, 0x00,
    // X (88)
    0x44, 0x44, 0x28, 0x10, 0x28, 0x44, 0x44, 0x00,
    // Y (89)
    0x44, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00,
    // Z (90)
    0x7C, 0x04, 0x08, 0x10, 0x20, 0x40, 0x7C, 0x00,
    // [ (91)
    0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00,
    // \ (92)
    0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00,
    // ] (93)
    0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00,
    // ^ (94)
    0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00,
    // _ (95)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00,
    // ` (96)
    0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // a (97)
    0x00, 0x00, 0x38, 0x04, 0x3C, 0x44, 0x3C, 0x00,
    // b (98)
    0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x78, 0x00,
    // c (99)
    0x00, 0x00, 0x38, 0x44, 0x40, 0x44, 0x38, 0x00,
    // d (100)
    0x04, 0x04, 0x3C, 0x44, 0x44, 0x44, 0x3C, 0x00,
    // e (101)
    0x00, 0x00, 0x38, 0x44, 0x7C, 0x40, 0x38, 0x00,
    // f (102)
    0x0C, 0x10, 0x38, 0x10, 0x10, 0x10, 0x10, 0x00,
    // g (103)
    0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C, 0x04, 0x38,
    // h (104)
    0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00,
    // i (105)
    0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x38, 0x00,
    // j (106)
    0x04, 0x00, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00,
    // k (107)
    0x40, 0x40, 0x48, 0x50, 0x60, 0x50, 0x48, 0x00,
    // l (108)
    0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00,
    // m (109)
    0x00, 0x00, 0x68, 0x54, 0x54, 0x44, 0x44, 0x00,
    // n (110)
    0x00, 0x00, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00,
    // o (111)
    0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00,
    // p (112)
    0x00, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40,
    // q (113) suite
    0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C, 0x04, 0x04,
    // r (114)
    0x00, 0x00, 0x58, 0x64, 0x40, 0x40, 0x40, 0x00,
    // s (115)
    0x00, 0x00, 0x38, 0x40, 0x38, 0x04, 0x78, 0x00,
    // t (116)
    0x10, 0x10, 0x38, 0x10, 0x10, 0x10, 0x0C, 0x00,
    // u (117)
    0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,
    // v (118)
    0x00, 0x00, 0x44, 0x44, 0x44, 0x28, 0x10, 0x00,
    // w (119)
    0x00, 0x00, 0x44, 0x44, 0x54, 0x54, 0x28, 0x00,
    // x (120)
    0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00,
    // y (121)
    0x00, 0x00, 0x44, 0x44, 0x44, 0x3C, 0x04, 0x38,
    // z (122)
    0x00, 0x00, 0x7C, 0x08, 0x10, 0x20, 0x7C, 0x00,
    // { (123)
    0x08, 0x10, 0x10, 0x20, 0x10, 0x10, 0x08, 0x00,
    // | (124)
    0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00,
    // } (125)
    0x20, 0x10, 0x10, 0x08, 0x10, 0x10, 0x20, 0x00,
    // ~ (126)
    0x20, 0x54, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    // é (233)
    0x10, 0x20, 0x38, 0x44, 0x7C, 0x40, 0x38, 0x00,
    // è (232)
    0x20, 0x10, 0x38, 0x44, 0x7C, 0x40, 0x38, 0x00,
    // ê (234)
    0x10, 0x28, 0x38, 0x44, 0x7C, 0x40, 0x38, 0x00,
    // à (224)
    0x20, 0x10, 0x38, 0x04, 0x3C, 0x44, 0x3C, 0x00,
    // â (226)
    0x10, 0x28, 0x38, 0x04, 0x3C, 0x44, 0x3C, 0x00,
    // û (251)
    0x10, 0x28, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,
    // ù (249)
    0x20, 0x10, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,
    // î (238)
    0x10, 0x28, 0x00, 0x30, 0x10, 0x10, 0x38, 0x00,
    // ï (239)
    0x28, 0x00, 0x30, 0x10, 0x10, 0x10, 0x38, 0x00,
    // ç (231)
    0x00, 0x38, 0x44, 0x40, 0x44, 0x38, 0x10, 0x20


};


const CharMapEntry CHAR_MAP_COMPLETE[] = 
{   
    {' ', 0},    // index 0 (32 * 8)
    {'!', 8},    // index 1
    {'"', 16},   // index 2
    {'#', 24},
    {'$', 32},
    {'%', 40},
    {'&', 48},
    {'\'', 56},
    {'(', 64},
    {')', 72},
    {'*', 80},
    {'+', 88},
    {',', 96},
    {'-', 104},
    {'.', 112},
    {'/', 120},
    {'0', 128},
    {'1', 136},
    {'2', 144},
    {'3', 152},
    {'4', 160},
    {'5', 168},
    {'6', 176},
    {'7', 184},
    {'8', 192},
    {'9', 200},
    {':', 208},
    {';', 216},
    {'<', 224},
    {'=', 232},
    {'>', 240},
    {'?', 248},
    {'@', 256},
    {'A', 264},
    {'B', 272},
    {'C', 280},
    {'D', 288},
    {'E', 296},
    {'F', 304},
    {'G', 312},
    {'H', 320},
    {'I', 328},
    {'J', 336},
    {'K', 344},
    {'L', 352},
    {'M', 360},
    {'N', 368},
    {'O', 376},
    {'P', 384},
    {'Q', 392},
    {'R', 400},
    {'S', 408},
    {'T', 416},
    {'U', 424},
    {'V', 432},
    {'W', 440},
    {'X', 448},
    {'Y', 456},
    {'Z', 464},
    {'[', 472},
    {'\\', 480},
    {']', 488},
    {'^', 496},
    {'_', 504},
    {'`', 512},
    {'a', 520},
    {'b', 528},
    {'c', 536},
    {'d', 544},
    {'e', 552},
    {'f', 560},
    {'g', 568},
    {'h', 576},
    {'i', 584},
    {'j', 592},
    {'k', 600},
    {'l', 608},
    {'m', 616},
    {'n', 624},
    {'o', 632},
    {'p', 640},
    {'q', 648},
    {'r', 656},
    {'s', 664},
    {'t', 672},
    {'u', 680},
    {'v', 688},
    {'w', 696},
    {'x', 704},
    {'y', 712},
    {'z', 720},
    {'{', 728},
    {'|', 736},
    {'}', 744},
    {'~', 752},
    {233, 760},  // é (0xE9)
    {232, 768},  // è (0xE8)
    {234, 776},  // ê (0xEA)
    {224, 784},  // à (0xE0)
    {226, 792},  // â (0xE2)
    {251, 800},  // û (0xFB)
    {249, 808},  // ù (0xF9)
    {238, 816},  // î (0xEE)
    {239, 824},  // ï (0xEF)
    {231, 832}   // ç (0xE7)

};


static const int TOTAL_CHARS = 105;  // 95 ASCII + 10 étendus


#endif